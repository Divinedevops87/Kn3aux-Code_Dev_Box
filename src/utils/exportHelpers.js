export const exportToReact = (components) => {
  const componentCode = components.map(comp => {
    const { type, props, style, position } = comp
    
    const styleString = Object.entries(style)
      .map(([key, value]) => `${key}: '${value}'`)
      .join(', ')
    
    const positionStyle = `position: 'absolute', left: '${position.x}px', top: '${position.y}px'`
    const fullStyle = `{${positionStyle}, ${styleString}}`
    
    switch (type) {
      case 'text':
        return `    <span style={${fullStyle}}>${props.content}</span>`
      case 'heading':
        return `    <${props.level || 'h2'} style={${fullStyle}}>${props.content}</${props.level || 'h2'}>`
      case 'button':
        return `    <button style={${fullStyle}}>${props.text}</button>`
      case 'image':
        return `    <img src="${props.src}" alt="${props.alt}" style={${fullStyle}} />`
      case 'input':
        return `    <input type="${props.type || 'text'}" placeholder="${props.placeholder}" style={${fullStyle}} />`
      default:
        return `    <div style={${fullStyle}}>/* ${type} component */</div>`
    }
  }).join('\n')

  return `import React from 'react'

const App = () => {
  return (
    <div style={{ position: 'relative', minHeight: '100vh', backgroundColor: '#f9fafb' }}>
${componentCode}
    </div>
  )
}

export default App`
}

export const exportToHTML = (components) => {
  const componentHTML = components.map(comp => {
    const { type, props, style, position } = comp
    
    const styleString = Object.entries({
      position: 'absolute',
      left: `${position.x}px`,
      top: `${position.y}px`,
      ...style
    }).map(([key, value]) => `${key.replace(/([A-Z])/g, '-$1').toLowerCase()}: ${value}`).join('; ')
    
    switch (type) {
      case 'text':
        return `    <span style="${styleString}">${props.content}</span>`
      case 'heading':
        return `    <${props.level || 'h2'} style="${styleString}">${props.content}</${props.level || 'h2'}>`
      case 'button':
        return `    <button style="${styleString}">${props.text}</button>`
      case 'image':
        return `    <img src="${props.src}" alt="${props.alt}" style="${styleString}" />`
      case 'input':
        return `    <input type="${props.type || 'text'}" placeholder="${props.placeholder}" style="${styleString}" />`
      default:
        return `    <div style="${styleString}"><!-- ${type} component --></div>`
    }
  }).join('\n')

  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KN3AUX-CODE™ App</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background-color: #f9fafb;
        }
        .container {
            position: relative;
            min-height: 100vh;
        }
    </style>
</head>
<body>
    <div class="container">
${componentHTML}
    </div>
</body>
</html>`
}

export const exportToJSON = (components) => {
  return JSON.stringify({
    version: '1.0.0',
    generator: 'KN3AUX-CODE™ Mobile Builder',
    createdAt: new Date().toISOString(),
    components: components
  }, null, 2)
}

export const generateGitSetup = (repositoryConfig) => {
  const { name, description, remoteUrl } = repositoryConfig
  
  return `# Git Repository Setup Instructions

## Quick Setup

\`\`\`bash
# Initialize git repository
git init

# Add all files
git add .

# Create initial commit
git commit -m "Initial commit: ${description}"

# Add remote origin (if configured)
${remoteUrl ? `git remote add origin ${remoteUrl}` : '# git remote add origin YOUR_REPOSITORY_URL'}

# Push to remote (if configured)
${remoteUrl ? `git push -u origin main` : '# git push -u origin main'}
\`\`\`

## Repository Information
- **Name**: ${name}
- **Description**: ${description}
${remoteUrl ? `- **Remote URL**: ${remoteUrl}` : '- **Remote URL**: Not configured'}

## Recommended Files to Add

Create these additional files for a complete repository:

### .gitignore
\`\`\`
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
/build
/dist

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db
\`\`\`

### README.md
\`\`\`markdown
# ${name}

${description}

Built with KN3AUX-CODE™ Mobile Builder.

## Getting Started

[Add your project setup instructions here]

## Features

[List the features of your mobile app]

## License

[Add your license information]
\`\`\`

---
*Generated by KN3AUX-CODE™ Mobile Builder*`
}

export const exportWithGitSetup = (components, exportType, repositoryConfig) => {
  let mainContent = ''
  let mainFilename = ''
  
  switch (exportType) {
    case 'react':
      mainContent = exportToReact(components)
      mainFilename = 'App.jsx'
      break
    case 'html':
      mainContent = exportToHTML(components)
      mainFilename = 'index.html'
      break
    case 'json':
      mainContent = exportToJSON(components)
      mainFilename = 'project.json'
      break
  }
  
  const gitSetup = generateGitSetup(repositoryConfig)
  
  return {
    files: [
      {
        name: mainFilename,
        content: mainContent,
        type: 'text/plain'
      },
      {
        name: 'GIT_SETUP.md',
        content: gitSetup,
        type: 'text/markdown'
      }
    ]
  }
}